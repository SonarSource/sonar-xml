env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  CIRRUS_CLONE_DEPTH: 20
  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  #Possible values for ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa, sonarsource-public-qa
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  DEVELOCITY_TOKEN: VAULT[development/kv/data/develocity data.token]
  DEVELOCITY_ACCESS_KEY: develocity.sonar.build=${DEVELOCITY_TOKEN}
  SONAR_PROJECT_KEY: "org.sonarsource.xml:xml"
  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

container_definition: &CONTAINER_DEFINITION
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default

qa_container_definition: &QA_CONTAINER_DEFINITION
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default

win_vm_definition: &WINDOWS_VM_DEFINITION
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    image: base-windows-jdk17-v*
    platform: windows
    region: eu-central-1
    disk: 128
    type: c5.4xlarge

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

log_develocity_url_script: &log_develocity_url_script |
  echo "Develocity URL: https://develocity.sonar.build/scans?search.publicHostnames=cirrus-ci-task-${CIRRUS_TASK_ID}"

build_task:
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 2
    memory: 2G
  env:
    # analysis on next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  build_script:
    - *log_develocity_url_script
    - source cirrus-env BUILD
    - regular_mvn_build_deploy_analyze
  cleanup_before_cache_script: cleanup_maven_repository

sonar_shadow_scan_and_issue_replication_task:
  depends_on:
    - build
  # Only run when triggered by the cirrus-ci cron job named "nightly"
  only_if: $CIRRUS_CRON == "nightly"
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 2
    memory: 2G
  env:
    SHADOW_ORGANIZATION: "sonarsource"
    SHADOW_PROJECT_KEY: "SonarSource_sonar-xml"
    # to replicate issue states from next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    matrix:
      - name: "sonarcloud.io"
        SHADOW_SONAR_TOKEN: VAULT[development/kv/data/sonarcloud data.token]
        SHADOW_SONAR_HOST_URL: "https://sonarcloud.io"
      - name: "sonarqube.us"
        SHADOW_SONAR_TOKEN: VAULT[development/kv/data/sonarqube-us data.token]
        SHADOW_SONAR_HOST_URL: "https://sonarqube.us"
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  build_script:
    - *log_develocity_url_script
    - ./shadow-scan-and-issue-replication.sh
  cleanup_before_cache_script: cleanup_maven_repository

ws_scan_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 2
    memory: 2G
  # run only on master, long-term branches and mend-related branches
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "mend-.*")
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  whitesource_script:
    - *log_develocity_url_script
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn clean install -DskipTests
    - source ws_scan.sh
  allow_failures: "true"
  always:
    ws_artifacts:
      path: "whitesource/**/*"

build_win_task:
  <<: *WINDOWS_VM_DEFINITION
  maven_cache: { folder: .m2/repository }
  build_script:
    - *log_develocity_url_script
    - source cirrus-env CI
    - mvn test
  cleanup_before_cache_script: cleanup_maven_repository

plugin_qa_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  eks_container:
    <<: *QA_CONTAINER_DEFINITION
    cpu: 3
    memory: 8G
  env:
    GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
    matrix:
      - SQ_VERSION: LATEST_RELEASE
      - SQ_VERSION: DEV
  maven_cache:
    folder: $CIRRUS_WORKING_DIR/.m2/repository
  qa_script:
    - *log_develocity_url_script
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/plugin
    - mvn verify -Pit-plugin -Dsonar.runtimeVersion=${SQ_VERSION} -Dmaven.test.redirectTestOutputToFile=false -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository

ruling_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  env:
    GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
  eks_container:
    <<: *QA_CONTAINER_DEFINITION
    cpu: 4
    memory: 8G
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  ruling_script:
    - *log_develocity_url_script
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/ruling
    - mvn verify -Pit-ruling -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository

ruling_win_task:
  depends_on:
    - build_win
  <<: *WINDOWS_VM_DEFINITION
  env:
    GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  build_script:
    - *log_develocity_url_script
    - source cirrus-env QA
    - mvn verify -Pit-ruling -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository

promote_task:
  depends_on:
    - build
    - sonar_shadow_scan_and_issue_replication
    - build_win
    - ruling
    - ruling_win
    - plugin_qa
    - ws_scan
  <<: *ONLY_SONARSOURCE_QA
  eks_container:
    <<: *CONTAINER_DEFINITION
    cpu: 0.5
    memory: 500M
  env:
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  script: cirrus_promote_maven
  cleanup_before_cache_script: cleanup_maven_repository
